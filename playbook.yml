---
- hosts: localhost
  become: true
  vars:
    new_server_name: WP_server
    new_server_name2: Docker_server
    new_server_address: 10.12.0.10
    new_server_address2: 10.12.0.11

  tasks:
    - name: Install packages
      apt: 
        name: "{{ item }}"
        state: latest 
      loop: 
        - wget
        - build-essential
        - apache2
        - php
        - openssl
        - perl
        - make
        - php-gd
        - libgd-dev
        - libapache2-mod-php
        - libperl-dev
        - libssl-dev
        - daemon
        - autoconf
        - libc6-dev
        - libmcrypt-dev
        - libssl-dev
        - libnet-snmp-perl
        - gettext
        - unzip
        - rsyslog
      tags: [ 'setup' ]
        
    - name: Configure rsyslog server
      template:
        src: rsyslog_server.conf.j2
        dest: /etc/rsyslog.conf
        
    - name: Download Nagios core
      get_url:
        url: "https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.4.6.tar.gz" 
        dest: "/tmp/nagios.tar.gz"

    - name: Extract Nagios core
      ansible.builtin.unarchive:
        src: "/tmp/nagios.tar.gz"
        dest: "/tmp/"

    - name: Configure Nagios
      ansible.builtin.shell:
        cmd: "cd /tmp/nagios-4.4.6 && ./configure --with-httpd-conf=/etc/apache2/sites-available"

    - name: Add new server to nagios configuration
      blockinfile:
        path: /usr/local/nagios/etc/servers/client.cfg
        block: | 
          define host {
            use linux-server
            host_name {{ new_server_name }}
            address {{ new_server_address }}
            register 1
            hostgroups group_hosts
          }
          define host {
            use linux-server
            host_name {{ new_server_name2 }}
            address {{ new_server_address2 }}
            register 1 
            hostgroups group_hosts
          }
          define service {
            use local-service; Name of service template to use
            host_name {{ new_server_name }}, {{ new_server_name2 }}
            service_description Root Partition
            check_command check_local_disk!20%!10%!
          }
          define service {
            use local-service; Name of service template to use 
            host_name {{ new_server_name }}, {{ new_server_name2 }}
            service_description Current Users
            check_command check_local_users!20!50
          }
          define service { 
            use local-service; Name of service template to use 
            host_name {{ new_server_name }}, {{ new_server_name2 }}
            service_description Total Processes
            check_command check_local_procs!250!400!RSZDT
          }
          define service { 
            use local-service; Name of service template to use 
            host_name {{ new_server_name }}, {{ new_server_name2 }}
            service_description Check Load
            check_command check_local_load!5.0,4.0,3.0!10.0,6.0,4.0
          }
          define service {
           use local-service; Name of service template to use
           host_name {{ new_server_name }}, {{ new_server_name2 }}
           service_description Swap Usage
           check_command check_local_swap!20%!10%
          }
          define service {
           use local-service; Name of service template to use 
           host_name {{ new_server_name }}, {{ new_server_name2 }}
           service_description SSH
           check_command check_ssh
           notifications_enabled 0
          }
          define service { 
           use local-service; Name of service template to use
           host_name {{ new_server_name }}, {{ new_server_name2 }} 
           service_description HTTP
           check_command check_http
           notifications_enabled 0
          }
        backup: yes

    - name: Update monitoring server packages
      apt:
        update_cache: yes
        upgrade: yes
      
    - name: Update logserver packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Restart rsyslog server
      service: 
        name: rsyslog
        state: restarted
        
    - name: Restart Nagios service
      service:
        name: nagios
        state: restarted
  
- name: Hosts config
  hosts: group_hosts
  become: true
  tasks:      
    - name: Install packages
      apt: 
        name: "{{ item }}"
        update_cache: yes
        state: present
      loop:
        - 'nagios-nrpe-server'
        - 'nagios-plugins'
        - 'rsyslog'
      tags: [ 'setup' ]

    - name: configure NRPE
      template:
        src: nrpe.cfg.j2
        dest: /etc/nagios/nrpe.cfg
      
    - name: Configure rsyslog client
      template:
        src: rsyslog_client.conf.j2
        dest: /etc/rsyslog.conf
       
    - name: Restart Nagios nrpe
      service:
        name: nagios-nrpe-server
        state: restarted
       
    - name: Restart Rsyslog client
      service:
        name: rsyslog
        state: restarted

- name: Configure WordPress server
  hosts: 10.12.0.10
  become: true
  vars:
    wordpress_db_name: wp-db
    wordpress_db_user: wp-usr
    wordpress_url: /
    mysql_root_password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          66303634336164326266313265363532323636663838376230366338633961393962383430626539
          3366663235393133303130383333636630343732363930320a623938363261383566643665356335
          63323035373836393932633437663364323535633263313734316232303130316530626464393664
          3530323432643662340a346132623365336532393764326239643763323161343434366161663465
          6332
    wordpress_db_password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          63643533633464386662306237653036333262386164393264333462393334613864366336636431
          3530346235303663613532363930656562653162666237310a343033663839643037393933356530
          35636638396563376235656331646438636137626339323033633034623738663434316531366465
          3462623639316530340a306266313265356230383961346130323066663662343662363138343161
          3132
# use --ask-vault-pass because of this

   - name: Install packages
     apt: 
     name: "{{ item }}"
     state: present
     loop:
       - apache2
       - mysql-server
       - php
       - php-mysql
       - libapache2-mod-php
       - php-cli
       - php-gd
       - php-curl
       - php-xml
       - unzip
     tags: [ 'setup' ]
     
   - name: Configure MySQL root password
     debconf:
       name: 'mysql-server'
       question: 'mysql-server/root_password'
       value: '{{ mysql_root_password }}'
       vtype: 'password'

   - name: Configure MySQL root password (repeat)
     debconf:
       name: 'mysql-server'
       question: 'mysql-server/root_password_again'
       value: '{{ mysql_root_password }}'
       vtype: 'password'

   - name: Create MySQL database for WordPress
     mysql_db:
       name: '{{ wordpress_db_name }}'
       state: present
       login_user: root
       login_password: '{{ mysql_root_password }}'

   - name: Create MySQL user for WordPress
     mysql_user:
       name: '{{ wordpress_db_user }}'
       password: '{{ wordpress_db_password }}'
       priv: '{{ wordpress_db_name }}.*:ALL'
       state: present
       login_user: root
       login_password: '{{ mysql_root_password }}'

   - name: Download and extract WordPress
     get_url:
       url: 'https://wordpress.org/latest.tar.gz'
       dest: '/tmp/wordpress.tar.gz'

   - name: Extract WordPress archive
     ansible.builtin.unarchive:
       src: '/tmp/wordpress.tar.gz'
       dest: '/var/www/html/'
       remote_src: yes
     notify: Restart Apache

   - name: Set up WordPress configuration file
     template:
       src: wp-config.php.j2
       dest: '/var/www/html/wordpress/wp-config.php'
       
   - name: Harden Apache server
     template:
       src: apache_hardening.conf.j2
       dest: /etc/apache2/httpd.conf
       
   - name: Enable Apache hardening configuration
     command: a2enconf hardening 
     
   - name: Restart Apache
     service:
       name: apache2
       state: restarted

- name: Configure Docker server
  hosts: 10.12.0.11
  become: true
  vars:
    ansible_ssh_user: localadmin
  tasks:
    - name: Install packages
      apt: 
      name: "{{ item }}"
      state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
      tags: [ 'setup' ]

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Add user to the docker group
      user:
        name: "{{ ansible_ssh_user }}"
        groups: docker
        append: yes
      become: true

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
